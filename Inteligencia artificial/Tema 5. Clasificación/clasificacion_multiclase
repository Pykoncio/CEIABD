{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOJnUEzOTkaqX7CeqEO7iCu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Clasificación. Parte II - Clasificación Multiclase\n","\n","Seguimos con un sistema de aprendizaje **supervisado** de **clasificación**.\n","\n","Mientras que un clasificador binario distingue dos clases, un **clasificador multiclase** o **clasificador multinomial** puede distinguir más de dos clases.\n","\n","Continuamos trabajando con el dataset **MNIST** (Modified National Institute of Standards and Technology).\n","\n","En este caso, nuestro objetivo es crear un modelo que sea capaz de decir a qué dígito se corresponde una imagen determinada."],"metadata":{"id":"ua6rwlr7TM_w"}},{"cell_type":"markdown","source":["## Importación de paquetes"],"metadata":{"id":"V6Y9fwViUXer"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"metadata":{"id":"Uchx4ICKUaL4","executionInfo":{"status":"ok","timestamp":1730705690437,"user_tz":-60,"elapsed":1201,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["## Carga de datos"],"metadata":{"id":"Qbbc3nyBUtEo"}},{"cell_type":"code","source":["from sklearn.datasets import fetch_openml\n","\n","mnist = fetch_openml(\"mnist_784\", version=1)"],"metadata":{"id":"xVpbOz5BUrKy","executionInfo":{"status":"ok","timestamp":1730705718729,"user_tz":-60,"elapsed":28295,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["Hay varias estrategias posibles para clasificar los dígitos del 0 al 9:\n","- <u>Crear un clasificador para cada dígito</u>, aplicarlos todos y quedarnos con el resultado que nos interesa. Este método se llama **OvR** (*One versus the Rest*) o también se puede llamar **OvA** (*One versus All*). Por ejemplo, si el dígito es un 7, el clasificador 0/no 0 dirá que no es un 0, el clasificador 1/no 1 dirá que no es un 1,... y el de 7/no 7 **SÍ** dirá que es un 7.\n","\n","- <u>Crear un clasificador para cada par de dígitos</u>, uno que distinga entre 0 y 1, otro entre 0 y 2, ..., otro entre 1 y 2, ..., otro entre 2 y 3, ... Si hay $N$ clases, necesitamos $\\frac{N \\times (N - 1)}{2}$ clasificadores. En el caso que nos ocupa, tendríamos que crear 45 clasificadores. A cada imagen habría que pasarle los 45 clasificadores y puntuar cada resultado. Escogeríamos la clase que mejor se haya comportado, igual que una liga de fútbol, en la que se enfrenta cada equipo con todos los demás, gana el que más puntos tiene. Esta técnica se llama **OvO** (*One versus One*). Por ejemplo, si el dígito es un 8, al aplicar el clasificador 0/8, saldrá el 8 y se le dará un punto, al aplicar el clasificador 1/8, saldrá el 8 y se le dará otro punto, etc. Al final, el número con mas puntos será el 8.\n","\n","- <u>Crear un clasificador multiclase (nativo)</u>, hay algoritmos, como por ejemplo el *k-Nearest Neighbours*, que trabajan bien detectando de forma nativa varias clases diferentes."],"metadata":{"id":"C2lz34LLVILR"}},{"cell_type":"markdown","source":["## Extracción de la matriz de datos y el vector correspondiente al atributo objetivo"],"metadata":{"id":"prLVe4SBapVe"}},{"cell_type":"code","source":["X = mnist[\"data\"]\n","y = mnist[\"target\"]\n","\n","y = y.astype(np.uint8)"],"metadata":{"id":"ex2uXDrna5hj","executionInfo":{"status":"ok","timestamp":1730705718730,"user_tz":-60,"elapsed":19,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## Creación del conjunto de datos de entrenamiento y de los datos de prueba"],"metadata":{"id":"TXuBWrLMb47K"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]"],"metadata":{"id":"Zbk5lfhSbfLf","executionInfo":{"status":"ok","timestamp":1730705718730,"user_tz":-60,"elapsed":17,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## Extracción de algunos números de prueba"],"metadata":{"id":"tic_gyF7cLvX"}},{"cell_type":"code","source":["example_digit1 = X.loc[25].to_numpy()\n","example_digit1_image = example_digit1.reshape(28, 28)\n","plt.imshow(example_digit1_image, cmap=\"binary\")\n","plt.axis(\"off\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":575},"id":"Cgg1o7VxcS0e","executionInfo":{"status":"ok","timestamp":1730705718730,"user_tz":-60,"elapsed":16,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"397c5e07-5474-457b-b983-6749697035d9"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["example_digit2 = X.loc[26].to_numpy()\n","example_digit2_image = example_digit2.reshape(28, 28)\n","plt.imshow(example_digit2_image, cmap=\"binary\")\n","plt.axis(\"off\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":575},"id":"q78gPslEdGSY","executionInfo":{"status":"ok","timestamp":1730705718730,"user_tz":-60,"elapsed":11,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"2af52792-307c-438e-c68c-91f68b0132a4"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Creación de un clasificador multiclase a partir de la técnica **OvO**\n","\n","Vamos a usar el algoritmo *SVM* (Support Vector Machine) que es intrínsecamente un clasificador binario.\n","\n","Scikit Learn es capaz de detectar que queremos hacer una clasificación multiclase y \"por debajo\" usa la técnica **OvO**, es decir, crea 45 clasificadores."],"metadata":{"id":"o63VyvjbfA71"}},{"cell_type":"code","source":["from sklearn.svm import SVC # SupportVectorClassification\n","\n","mnist_model = SVC()\n","mnist_model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"8h2VFtvaf2ew","executionInfo":{"status":"ok","timestamp":1730705989748,"user_tz":-60,"elapsed":271027,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"89291838-87da-4c83-b319-0149341ff618"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Probamos con los dígitos de ejemplo anteriores\n","\n","mnist_model.predict([example_digit1, example_digit2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KaGR6kSZh5RT","executionInfo":{"status":"ok","timestamp":1730705989748,"user_tz":-60,"elapsed":15,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"52ba49f2-8171-4b6a-cca0-af74a415584d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([2, 4], dtype=uint8)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Muestra las clases\n","\n","mnist_model.classes_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HHkEf_3qiqZ3","executionInfo":{"status":"ok","timestamp":1730705989748,"user_tz":-60,"elapsed":13,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"511e9548-5d89-4308-a514-723e549e8ef0"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Puntuación de cada una de las clases para cada imagen\n","# La clase correspondiente al 2, por ejemplo, debería de tener la máxima puntuación\n","\n","mnist_model.decision_function([example_digit1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dMc-dw_dkya4","executionInfo":{"status":"ok","timestamp":1730705989748,"user_tz":-60,"elapsed":11,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"60592573-ab21-401a-bf17-ca71426342c3"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[ 4.92505076,  3.74597077,  9.31442812,  8.30989605, -0.3123735 ,\n","         5.78209525,  2.71797624,  0.69243018,  7.3117808 ,  1.71052032]])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Puntuación de cada una de las clases para cada imagen\n","# La clase correspondiente al 4, por ejemplo, debería de tener la máxima puntuación\n","\n","mnist_model.decision_function([example_digit2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tKp18v1-lZ6E","executionInfo":{"status":"ok","timestamp":1730705989749,"user_tz":-60,"elapsed":9,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"5fd91b00-287a-45f9-a715-661971612b14"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[-0.30561611,  2.71904625,  2.72182152,  6.1750562 ,  9.31070254,\n","         2.78903166,  0.70489991,  7.28077821,  5.12715056,  8.30325366]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["Se clasifican correctamente las imágenes y vemos que el 2 se parece bastante al 3 y al 8 y el 4 se parece al 9 (por las puntuaciones obtenidas)."],"metadata":{"id":"ZnqifEVslwnE"}},{"cell_type":"markdown","source":["## Rendimiento del modelo SVC\n","\n","### Aciertos y fallos\n","\n","Usamos los datos de prueba para hacer las predicciones y comprobamos si son correctas."],"metadata":{"id":"8efJnwwcl-az"}},{"cell_type":"code","source":["y_test_pred = mnist_model.predict(X_test)\n","\n","success = (y_test == y_test_pred)\n","\n","aciertos = success[success == True].size\n","fallos = success[success == False].size\n","\n","print(\"Aciertos:\", aciertos)\n","print(\"Fallos:\", fallos)\n","print(\"Precision:\", aciertos / (aciertos + fallos) * 100, \"%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uNJoYr5DmPYt","executionInfo":{"status":"ok","timestamp":1730706112206,"user_tz":-60,"elapsed":122463,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"6d8a3bb1-0acc-45d3-de89-bdad6f023b99"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Aciertos: 9792\n","Fallos: 208\n","Precision: 97.92 %\n"]}]},{"cell_type":"markdown","source":["### Validación cruzada (cross validation)\n","\n","En la validación cruzada, se dividen los datos de entrenamiento en varios grupos."],"metadata":{"id":"ihViZ5R3n7BX"}},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","\n","cross_val_score(mnist_model, X_train, y_train, cv=3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YLbzDAFAoE_d","executionInfo":{"status":"ok","timestamp":1730707084282,"user_tz":-60,"elapsed":972083,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"d6df718a-bd67-4f35-ed19-03b13b7dadd0"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.977 , 0.9738, 0.9739])"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":[],"metadata":{"id":"ysr2SbSxoxeI"}},{"cell_type":"markdown","source":["### Matriz de confusión\n","\n","Cada columna de la matriz representa el número de predicciones de cada clase, mientras que cada fila representa a las instancias de la clase real."],"metadata":{"id":"Fq9cnCUMoxM5"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, y_test_pred)\n","print(cm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d8FZphsFo7ww","executionInfo":{"status":"ok","timestamp":1730707084283,"user_tz":-60,"elapsed":9,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"b3e00610-a4d5-48ba-f397-cf0b836790bf"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 973    0    1    0    0    2    1    1    2    0]\n"," [   0 1126    3    1    0    1    1    1    2    0]\n"," [   6    1 1006    2    1    0    2    7    6    1]\n"," [   0    0    2  995    0    2    0    5    5    1]\n"," [   0    0    5    0  961    0    3    0    2   11]\n"," [   2    0    0    9    0  871    4    1    4    1]\n"," [   6    2    0    0    2    3  944    0    1    0]\n"," [   0    6   11    1    1    0    0  996    2   11]\n"," [   3    0    2    6    3    2    2    3  950    3]\n"," [   3    4    1    7   10    2    1    7    4  970]]\n"]}]},{"cell_type":"code","source":["# Representación gráfica de la matriz de confusión\n","\n","plt.matshow(cm, cmap=plt.cm.gray)\n","plt.xticks(np.arange(10))\n","plt.yticks(np.arange(10))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":437},"id":"vglInnvmzQlp","executionInfo":{"status":"ok","timestamp":1730707084283,"user_tz":-60,"elapsed":7,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"ffb9cf58-bdba-455d-b208-da53254b71b7"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 480x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["La matriz de confusión muestra que el modelo se comporta correctamente."],"metadata":{"id":"8ys6vRnQz4Dc"}},{"cell_type":"markdown","source":["### Creación de un clasificador multiclase con el algoritmo **K-Nearest Neightbours**\n","\n","Vamos a usar el algoritmo K-Nearest Neightbours **K-Nearest Neightbours** (K-vecinos más cercanos) que es, de forma nativa, un clasificador multiclase."],"metadata":{"id":"YPnjCtxP0JhP"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","mnist_model_knn = KNeighborsClassifier()\n","mnist_model_knn.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"oV0UNVkDNMjZ","executionInfo":{"status":"ok","timestamp":1730707662385,"user_tz":-60,"elapsed":391,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"5f6e5b51-ee24-4e46-cc3f-78fe40525039"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["mnist_model_knn.predict([example_digit1, example_digit2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JE5DebZmN5Sg","executionInfo":{"status":"ok","timestamp":1730707753871,"user_tz":-60,"elapsed":579,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"5d064dd0-5151-40d1-c7fe-287c86ed3ca4"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([2, 4], dtype=uint8)"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["El modelo predice bien los dos casos."],"metadata":{"id":"6-snBAaLOLln"}},{"cell_type":"markdown","source":["## Rendimiento del modelo KNN"],"metadata":{"id":"OEln4UM6OQwe"}},{"cell_type":"code","source":["y_test_pred = mnist_model_knn.predict(X_test)\n","\n","success = (y_test == y_test_pred)\n","\n","aciertos = success[success == True].size\n","fallos = success[success == False].size\n","\n","print(\"Aciertos:\", aciertos)\n","print(\"Fallos:\", fallos)\n","print(\"Precision:\", aciertos / (aciertos + fallos) * 100, \"%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730707926068,"user_tz":-60,"elapsed":45827,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"ec35f3dd-4015-4807-af0d-7a826658d07f","id":"pkwJ511dOc6e"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Aciertos: 9688\n","Fallos: 312\n","Precision: 96.88 %\n"]}]},{"cell_type":"markdown","source":["Un $96.88$% de aciertos con un modelo creado mucho más rápido."],"metadata":{"id":"iiynRztgPG9r"}},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_test_pred)\n","print(cm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lIoZPBAhPzWR","executionInfo":{"status":"ok","timestamp":1730708206308,"user_tz":-60,"elapsed":359,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"839db9cb-4172-4752-b9d7-e64ee328763c"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 974    1    1    0    0    1    2    1    0    0]\n"," [   0 1133    2    0    0    0    0    0    0    0]\n"," [  11    8  991    2    1    0    1   15    3    0]\n"," [   0    3    3  976    1   13    1    6    3    4]\n"," [   3    7    0    0  944    0    4    2    1   21]\n"," [   5    0    0   12    2  862    4    1    2    4]\n"," [   5    3    0    0    3    2  945    0    0    0]\n"," [   0   22    4    0    3    0    0  988    0   11]\n"," [   8    3    5   13    6   12    5    5  913    4]\n"," [   5    7    3    9    7    3    1   10    2  962]]\n"]}]},{"cell_type":"code","source":["# Representación gráfica de la matriz de confusión\n","\n","plt.matshow(cm, cmap=plt.cm.gray)\n","plt.xticks(np.arange(10))\n","plt.yticks(np.arange(10))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":437},"id":"LGIOiwa1PMkk","executionInfo":{"status":"ok","timestamp":1730708210205,"user_tz":-60,"elapsed":769,"user":{"displayName":"Hugo Peralta Muñoz","userId":"00397476948593499523"}},"outputId":"34e774d8-180b-453e-c3a5-3447874a2234"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 480x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}